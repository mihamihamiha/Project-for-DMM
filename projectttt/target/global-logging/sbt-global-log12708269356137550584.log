[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ionit\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ionit\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 19.0.2)
[debug]       Load.loadUnit: plugins took 644.5305ms
[debug]       Load.loadUnit: defsScala took 0.9332ms
[debug] [Loading] Scanning directory C:\Users\ionit\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ionit\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 135.0528 ms
[debug]           Load.resolveProject(global-plugins) took 299.1289ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ionit\.sbt\1.0\plugins, plugins: List(<none>))) took 538.8475ms
[debug] [Loading] Done in C:\Users\ionit\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 652.3214ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2427ms
[debug]     Load.loadUnit(file:/C:/Users/ionit/.sbt/1.0/plugins/, ...) took 1399.1175ms
[debug]   Load.apply: load took 3323.249ms
[debug]   Load.apply: resolveProjects took 136.2098ms
[debug]   Load.apply: finalTransforms took 481.2473ms
[debug]   Load.apply: config.delegates took 130.9434ms
[debug]   Load.apply: Def.make(settings)... took 3853.1543ms
[debug]   Load.apply: structureIndex took 816.767ms
[debug]   Load.apply: mkStreams took 13.3193ms
[info] loading global plugins from C:\Users\ionit\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 20911.1566ms
[debug]           Load.loadUnit: plugins took 227.6387ms
[debug]           Load.loadUnit: defsScala took 0.014ms
[debug] [Loading] Scanning directory C:\Users\ionit\IdeaProjects\projectttt\project
[debug]             Load.loadUnit: mkEval took 17.2743ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ionit\IdeaProjects\projectttt\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8526 ms
[info] loading settings for project projectttt-build from idea2.sbt ...
[debug]               Load.resolveProject(projectttt-build) took 10.4994ms
[debug]             Load.loadTransitive: finalizeProject(Project(id projectttt-build, base: C:\Users\ionit\IdeaProjects\projectttt\project, plugins: List(<none>))) took 13.0975ms
[debug] [Loading] Done in C:\Users\ionit\IdeaProjects\projectttt\project, returning: (projectttt-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 8701.0725ms
[debug]           Load.loadUnit: cleanEvalClasses took 20.6361ms
[debug]         Load.loadUnit(file:/C:/Users/ionit/IdeaProjects/projectttt/project/, ...) took 8951.375ms
[debug]       Load.apply: load took 8967.4775ms
[debug]       Load.apply: resolveProjects took 0.4852ms
[debug]       Load.apply: finalTransforms took 25.5958ms
[debug]       Load.apply: config.delegates took 0.615ms
[debug]       Load.apply: Def.make(settings)... took 280.3383ms
[debug]       Load.apply: structureIndex took 74.0935ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\ionit\IdeaProjects\projectttt\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 12185.2756ms
[debug]     Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Users\ionit\IdeaProjects\projectttt
[debug]       Load.loadUnit: mkEval took 0.4225ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.1185 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 75.5817ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\ionit\IdeaProjects\projectttt, plugins: List(<none>))) took 80.795ms
[debug] [Loading] Done in C:\Users\ionit\IdeaProjects\projectttt, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2852.2204ms
[debug]     Load.loadUnit: cleanEvalClasses took 35.1605ms
[debug]   Load.loadUnit(file:/C:/Users/ionit/IdeaProjects/projectttt/, ...) took 15075.2469ms
[debug] Load.apply: load took 15077.7086ms
[debug] Load.apply: resolveProjects took 0.1228ms
[debug] Load.apply: finalTransforms took 66.659ms
[debug] Load.apply: config.delegates took 0.4194ms
[debug] Load.apply: Def.make(settings)... took 325.5266ms
[debug] Load.apply: structureIndex took 32.3981ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to projectttt (in build file:/C:/Users/ionit/IdeaProjects/projectttt/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65177 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65177, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to projectttt (in build file:/C:/Users/ionit/IdeaProjects/projectttt/)
[debug] > Exec(idea-shell, None, None)
